/* automatically generated by rust-bindgen 0.66.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct minisat_solver_t {
    _unused: [u8; 0],
}
pub type minisat_solver = minisat_solver_t;
pub type minisat_Var = ::std::os::raw::c_int;
pub type minisat_Lit = ::std::os::raw::c_int;
pub type minisat_lbool = ::std::os::raw::c_int;
extern crate libloading;
pub struct cminisat {
    __library: ::libloading::Library,
    pub minisat_new: Result<unsafe extern "C" fn() -> *mut minisat_solver, ::libloading::Error>,
    pub minisat_delete: Result<unsafe extern "C" fn(s: *mut minisat_solver), ::libloading::Error>,
    pub minisat_newVar: Result<unsafe extern "C" fn(s: *mut minisat_solver) -> minisat_Var, ::libloading::Error>,
    pub minisat_newLit: Result<unsafe extern "C" fn(s: *mut minisat_solver) -> minisat_Lit, ::libloading::Error>,
    pub minisat_mkLit: Result<unsafe extern "C" fn(x: minisat_Var) -> minisat_Lit, ::libloading::Error>,
    pub minisat_mkLit_args: Result<unsafe extern "C" fn(x: minisat_Var, sign: ::std::os::raw::c_int) -> minisat_Lit, ::libloading::Error>,
    pub minisat_negate: Result<unsafe extern "C" fn(p: minisat_Lit) -> minisat_Lit, ::libloading::Error>,
    pub minisat_var: Result<unsafe extern "C" fn(p: minisat_Lit) -> minisat_Var, ::libloading::Error>,
    pub minisat_sign: Result<unsafe extern "C" fn(p: minisat_Lit) -> minisat_bool, ::libloading::Error>,
    pub minisat_addClause: Result<
        unsafe extern "C" fn(s: *mut minisat_solver, len: ::std::os::raw::c_int, ps: *mut minisat_Lit) -> minisat_bool,
        ::libloading::Error,
    >,
    pub minisat_addClause_begin: Result<unsafe extern "C" fn(s: *mut minisat_solver), ::libloading::Error>,
    pub minisat_addClause_addLit: Result<unsafe extern "C" fn(s: *mut minisat_solver, p: minisat_Lit), ::libloading::Error>,
    pub minisat_addClause_commit: Result<unsafe extern "C" fn(s: *mut minisat_solver) -> minisat_bool, ::libloading::Error>,
    pub minisat_simplify: Result<unsafe extern "C" fn(s: *mut minisat_solver) -> minisat_bool, ::libloading::Error>,
    pub minisat_solve: Result<
        unsafe extern "C" fn(s: *mut minisat_solver, len: ::std::os::raw::c_int, ps: *mut minisat_Lit) -> minisat_bool,
        ::libloading::Error,
    >,
    pub minisat_limited_solve: Result<
        unsafe extern "C" fn(s: *mut minisat_solver, len: ::std::os::raw::c_int, ps: *mut minisat_Lit) -> minisat_lbool,
        ::libloading::Error,
    >,
    pub minisat_solve_begin: Result<unsafe extern "C" fn(s: *mut minisat_solver), ::libloading::Error>,
    pub minisat_solve_addLit: Result<unsafe extern "C" fn(s: *mut minisat_solver, p: minisat_Lit), ::libloading::Error>,
    pub minisat_solve_commit: Result<unsafe extern "C" fn(s: *mut minisat_solver) -> minisat_bool, ::libloading::Error>,
    pub minisat_limited_solve_commit: Result<unsafe extern "C" fn(s: *mut minisat_solver) -> minisat_lbool, ::libloading::Error>,
    pub minisat_okay: Result<unsafe extern "C" fn(s: *mut minisat_solver) -> minisat_bool, ::libloading::Error>,
    pub minisat_setPolarity:
        Result<unsafe extern "C" fn(s: *mut minisat_solver, v: minisat_Var, b: ::std::os::raw::c_int), ::libloading::Error>,
    pub minisat_setDecisionVar:
        Result<unsafe extern "C" fn(s: *mut minisat_solver, v: minisat_Var, b: ::std::os::raw::c_int), ::libloading::Error>,
    pub minisat_get_l_True: Result<unsafe extern "C" fn() -> minisat_lbool, ::libloading::Error>,
    pub minisat_get_l_False: Result<unsafe extern "C" fn() -> minisat_lbool, ::libloading::Error>,
    pub minisat_get_l_Undef: Result<unsafe extern "C" fn() -> minisat_lbool, ::libloading::Error>,
    pub minisat_value_Var: Result<unsafe extern "C" fn(s: *mut minisat_solver, x: minisat_Var) -> minisat_lbool, ::libloading::Error>,
    pub minisat_value_Lit: Result<unsafe extern "C" fn(s: *mut minisat_solver, p: minisat_Lit) -> minisat_lbool, ::libloading::Error>,
    pub minisat_modelValue_Var: Result<unsafe extern "C" fn(s: *mut minisat_solver, x: minisat_Var) -> minisat_lbool, ::libloading::Error>,
    pub minisat_modelValue_Lit: Result<unsafe extern "C" fn(s: *mut minisat_solver, p: minisat_Lit) -> minisat_lbool, ::libloading::Error>,
    pub minisat_num_assigns: Result<unsafe extern "C" fn(s: *mut minisat_solver) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub minisat_num_clauses: Result<unsafe extern "C" fn(s: *mut minisat_solver) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub minisat_num_learnts: Result<unsafe extern "C" fn(s: *mut minisat_solver) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub minisat_num_vars: Result<unsafe extern "C" fn(s: *mut minisat_solver) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub minisat_num_freeVars: Result<unsafe extern "C" fn(s: *mut minisat_solver) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub minisat_conflict_len: Result<unsafe extern "C" fn(s: *mut minisat_solver) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub minisat_conflict_nthLit:
        Result<unsafe extern "C" fn(s: *mut minisat_solver, i: ::std::os::raw::c_int) -> minisat_Lit, ::libloading::Error>,
    pub minisat_set_conf_budget: Result<unsafe extern "C" fn(s: *mut minisat_solver, x: ::std::os::raw::c_int), ::libloading::Error>,
    pub minisat_set_prop_budget: Result<unsafe extern "C" fn(s: *mut minisat_solver, x: ::std::os::raw::c_int), ::libloading::Error>,
    pub minisat_no_budget: Result<unsafe extern "C" fn(s: *mut minisat_solver), ::libloading::Error>,
    pub minisat_interrupt: Result<unsafe extern "C" fn(s: *mut minisat_solver), ::libloading::Error>,
    pub minisat_clearInterrupt: Result<unsafe extern "C" fn(s: *mut minisat_solver), ::libloading::Error>,
    pub minisat_setFrozen: Result<unsafe extern "C" fn(s: *mut minisat_solver, v: minisat_Var, b: minisat_bool), ::libloading::Error>,
    pub minisat_isEliminated: Result<unsafe extern "C" fn(s: *mut minisat_solver, v: minisat_Var) -> minisat_bool, ::libloading::Error>,
    pub minisat_eliminate:
        Result<unsafe extern "C" fn(s: *mut minisat_solver, turn_off_elim: minisat_bool) -> minisat_bool, ::libloading::Error>,
    pub minisat_set_verbosity: Result<unsafe extern "C" fn(s: *mut minisat_solver, v: ::std::os::raw::c_int), ::libloading::Error>,
    pub minisat_num_conflicts: Result<unsafe extern "C" fn(s: *mut minisat_solver) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub minisat_num_decisions: Result<unsafe extern "C" fn(s: *mut minisat_solver) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub minisat_num_restarts: Result<unsafe extern "C" fn(s: *mut minisat_solver) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub minisat_num_propagations: Result<unsafe extern "C" fn(s: *mut minisat_solver) -> ::std::os::raw::c_int, ::libloading::Error>,
}
impl cminisat {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let minisat_new = __library.get(b"minisat_new\0").map(|sym| *sym);
        let minisat_delete = __library.get(b"minisat_delete\0").map(|sym| *sym);
        let minisat_newVar = __library.get(b"minisat_newVar\0").map(|sym| *sym);
        let minisat_newLit = __library.get(b"minisat_newLit\0").map(|sym| *sym);
        let minisat_mkLit = __library.get(b"minisat_mkLit\0").map(|sym| *sym);
        let minisat_mkLit_args = __library.get(b"minisat_mkLit_args\0").map(|sym| *sym);
        let minisat_negate = __library.get(b"minisat_negate\0").map(|sym| *sym);
        let minisat_var = __library.get(b"minisat_var\0").map(|sym| *sym);
        let minisat_sign = __library.get(b"minisat_sign\0").map(|sym| *sym);
        let minisat_addClause = __library.get(b"minisat_addClause\0").map(|sym| *sym);
        let minisat_addClause_begin = __library.get(b"minisat_addClause_begin\0").map(|sym| *sym);
        let minisat_addClause_addLit = __library.get(b"minisat_addClause_addLit\0").map(|sym| *sym);
        let minisat_addClause_commit = __library.get(b"minisat_addClause_commit\0").map(|sym| *sym);
        let minisat_simplify = __library.get(b"minisat_simplify\0").map(|sym| *sym);
        let minisat_solve = __library.get(b"minisat_solve\0").map(|sym| *sym);
        let minisat_limited_solve = __library.get(b"minisat_limited_solve\0").map(|sym| *sym);
        let minisat_solve_begin = __library.get(b"minisat_solve_begin\0").map(|sym| *sym);
        let minisat_solve_addLit = __library.get(b"minisat_solve_addLit\0").map(|sym| *sym);
        let minisat_solve_commit = __library.get(b"minisat_solve_commit\0").map(|sym| *sym);
        let minisat_limited_solve_commit = __library.get(b"minisat_limited_solve_commit\0").map(|sym| *sym);
        let minisat_okay = __library.get(b"minisat_okay\0").map(|sym| *sym);
        let minisat_setPolarity = __library.get(b"minisat_setPolarity\0").map(|sym| *sym);
        let minisat_setDecisionVar = __library.get(b"minisat_setDecisionVar\0").map(|sym| *sym);
        let minisat_get_l_True = __library.get(b"minisat_get_l_True\0").map(|sym| *sym);
        let minisat_get_l_False = __library.get(b"minisat_get_l_False\0").map(|sym| *sym);
        let minisat_get_l_Undef = __library.get(b"minisat_get_l_Undef\0").map(|sym| *sym);
        let minisat_value_Var = __library.get(b"minisat_value_Var\0").map(|sym| *sym);
        let minisat_value_Lit = __library.get(b"minisat_value_Lit\0").map(|sym| *sym);
        let minisat_modelValue_Var = __library.get(b"minisat_modelValue_Var\0").map(|sym| *sym);
        let minisat_modelValue_Lit = __library.get(b"minisat_modelValue_Lit\0").map(|sym| *sym);
        let minisat_num_assigns = __library.get(b"minisat_num_assigns\0").map(|sym| *sym);
        let minisat_num_clauses = __library.get(b"minisat_num_clauses\0").map(|sym| *sym);
        let minisat_num_learnts = __library.get(b"minisat_num_learnts\0").map(|sym| *sym);
        let minisat_num_vars = __library.get(b"minisat_num_vars\0").map(|sym| *sym);
        let minisat_num_freeVars = __library.get(b"minisat_num_freeVars\0").map(|sym| *sym);
        let minisat_conflict_len = __library.get(b"minisat_conflict_len\0").map(|sym| *sym);
        let minisat_conflict_nthLit = __library.get(b"minisat_conflict_nthLit\0").map(|sym| *sym);
        let minisat_set_conf_budget = __library.get(b"minisat_set_conf_budget\0").map(|sym| *sym);
        let minisat_set_prop_budget = __library.get(b"minisat_set_prop_budget\0").map(|sym| *sym);
        let minisat_no_budget = __library.get(b"minisat_no_budget\0").map(|sym| *sym);
        let minisat_interrupt = __library.get(b"minisat_interrupt\0").map(|sym| *sym);
        let minisat_clearInterrupt = __library.get(b"minisat_clearInterrupt\0").map(|sym| *sym);
        let minisat_setFrozen = __library.get(b"minisat_setFrozen\0").map(|sym| *sym);
        let minisat_isEliminated = __library.get(b"minisat_isEliminated\0").map(|sym| *sym);
        let minisat_eliminate = __library.get(b"minisat_eliminate\0").map(|sym| *sym);
        let minisat_set_verbosity = __library.get(b"minisat_set_verbosity\0").map(|sym| *sym);
        let minisat_num_conflicts = __library.get(b"minisat_num_conflicts\0").map(|sym| *sym);
        let minisat_num_decisions = __library.get(b"minisat_num_decisions\0").map(|sym| *sym);
        let minisat_num_restarts = __library.get(b"minisat_num_restarts\0").map(|sym| *sym);
        let minisat_num_propagations = __library.get(b"minisat_num_propagations\0").map(|sym| *sym);
        Ok(cminisat {
            __library,
            minisat_new,
            minisat_delete,
            minisat_newVar,
            minisat_newLit,
            minisat_mkLit,
            minisat_mkLit_args,
            minisat_negate,
            minisat_var,
            minisat_sign,
            minisat_addClause,
            minisat_addClause_begin,
            minisat_addClause_addLit,
            minisat_addClause_commit,
            minisat_simplify,
            minisat_solve,
            minisat_limited_solve,
            minisat_solve_begin,
            minisat_solve_addLit,
            minisat_solve_commit,
            minisat_limited_solve_commit,
            minisat_okay,
            minisat_setPolarity,
            minisat_setDecisionVar,
            minisat_get_l_True,
            minisat_get_l_False,
            minisat_get_l_Undef,
            minisat_value_Var,
            minisat_value_Lit,
            minisat_modelValue_Var,
            minisat_modelValue_Lit,
            minisat_num_assigns,
            minisat_num_clauses,
            minisat_num_learnts,
            minisat_num_vars,
            minisat_num_freeVars,
            minisat_conflict_len,
            minisat_conflict_nthLit,
            minisat_set_conf_budget,
            minisat_set_prop_budget,
            minisat_no_budget,
            minisat_interrupt,
            minisat_clearInterrupt,
            minisat_setFrozen,
            minisat_isEliminated,
            minisat_eliminate,
            minisat_set_verbosity,
            minisat_num_conflicts,
            minisat_num_decisions,
            minisat_num_restarts,
            minisat_num_propagations,
        })
    }
    pub unsafe fn minisat_new(&self) -> *mut minisat_solver {
        (self.minisat_new.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn minisat_delete(&self, s: *mut minisat_solver) {
        (self.minisat_delete.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_newVar(&self, s: *mut minisat_solver) -> minisat_Var {
        (self.minisat_newVar.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_newLit(&self, s: *mut minisat_solver) -> minisat_Lit {
        (self.minisat_newLit.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_mkLit(&self, x: minisat_Var) -> minisat_Lit {
        (self.minisat_mkLit.as_ref().expect("Expected function, got error."))(x)
    }
    pub unsafe fn minisat_mkLit_args(&self, x: minisat_Var, sign: ::std::os::raw::c_int) -> minisat_Lit {
        (self.minisat_mkLit_args.as_ref().expect("Expected function, got error."))(x, sign)
    }
    pub unsafe fn minisat_negate(&self, p: minisat_Lit) -> minisat_Lit {
        (self.minisat_negate.as_ref().expect("Expected function, got error."))(p)
    }
    pub unsafe fn minisat_var(&self, p: minisat_Lit) -> minisat_Var {
        (self.minisat_var.as_ref().expect("Expected function, got error."))(p)
    }
    pub unsafe fn minisat_sign(&self, p: minisat_Lit) -> minisat_bool {
        (self.minisat_sign.as_ref().expect("Expected function, got error."))(p)
    }
    pub unsafe fn minisat_addClause(&self, s: *mut minisat_solver, len: ::std::os::raw::c_int, ps: *mut minisat_Lit) -> minisat_bool {
        (self.minisat_addClause.as_ref().expect("Expected function, got error."))(s, len, ps)
    }
    pub unsafe fn minisat_addClause_begin(&self, s: *mut minisat_solver) {
        (self.minisat_addClause_begin.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_addClause_addLit(&self, s: *mut minisat_solver, p: minisat_Lit) {
        (self.minisat_addClause_addLit.as_ref().expect("Expected function, got error."))(s, p)
    }
    pub unsafe fn minisat_addClause_commit(&self, s: *mut minisat_solver) -> minisat_bool {
        (self.minisat_addClause_commit.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_simplify(&self, s: *mut minisat_solver) -> minisat_bool {
        (self.minisat_simplify.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_solve(&self, s: *mut minisat_solver, len: ::std::os::raw::c_int, ps: *mut minisat_Lit) -> minisat_bool {
        (self.minisat_solve.as_ref().expect("Expected function, got error."))(s, len, ps)
    }
    pub unsafe fn minisat_limited_solve(&self, s: *mut minisat_solver, len: ::std::os::raw::c_int, ps: *mut minisat_Lit) -> minisat_lbool {
        (self.minisat_limited_solve.as_ref().expect("Expected function, got error."))(s, len, ps)
    }
    pub unsafe fn minisat_solve_begin(&self, s: *mut minisat_solver) {
        (self.minisat_solve_begin.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_solve_addLit(&self, s: *mut minisat_solver, p: minisat_Lit) {
        (self.minisat_solve_addLit.as_ref().expect("Expected function, got error."))(s, p)
    }
    pub unsafe fn minisat_solve_commit(&self, s: *mut minisat_solver) -> minisat_bool {
        (self.minisat_solve_commit.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_limited_solve_commit(&self, s: *mut minisat_solver) -> minisat_lbool {
        (self.minisat_limited_solve_commit.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_okay(&self, s: *mut minisat_solver) -> minisat_bool {
        (self.minisat_okay.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_setPolarity(&self, s: *mut minisat_solver, v: minisat_Var, b: ::std::os::raw::c_int) {
        (self.minisat_setPolarity.as_ref().expect("Expected function, got error."))(s, v, b)
    }
    pub unsafe fn minisat_setDecisionVar(&self, s: *mut minisat_solver, v: minisat_Var, b: ::std::os::raw::c_int) {
        (self.minisat_setDecisionVar.as_ref().expect("Expected function, got error."))(s, v, b)
    }
    pub unsafe fn minisat_get_l_True(&self) -> minisat_lbool {
        (self.minisat_get_l_True.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn minisat_get_l_False(&self) -> minisat_lbool {
        (self.minisat_get_l_False.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn minisat_get_l_Undef(&self) -> minisat_lbool {
        (self.minisat_get_l_Undef.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn minisat_value_Var(&self, s: *mut minisat_solver, x: minisat_Var) -> minisat_lbool {
        (self.minisat_value_Var.as_ref().expect("Expected function, got error."))(s, x)
    }
    pub unsafe fn minisat_value_Lit(&self, s: *mut minisat_solver, p: minisat_Lit) -> minisat_lbool {
        (self.minisat_value_Lit.as_ref().expect("Expected function, got error."))(s, p)
    }
    pub unsafe fn minisat_modelValue_Var(&self, s: *mut minisat_solver, x: minisat_Var) -> minisat_lbool {
        (self.minisat_modelValue_Var.as_ref().expect("Expected function, got error."))(s, x)
    }
    pub unsafe fn minisat_modelValue_Lit(&self, s: *mut minisat_solver, p: minisat_Lit) -> minisat_lbool {
        (self.minisat_modelValue_Lit.as_ref().expect("Expected function, got error."))(s, p)
    }
    pub unsafe fn minisat_num_assigns(&self, s: *mut minisat_solver) -> ::std::os::raw::c_int {
        (self.minisat_num_assigns.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_num_clauses(&self, s: *mut minisat_solver) -> ::std::os::raw::c_int {
        (self.minisat_num_clauses.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_num_learnts(&self, s: *mut minisat_solver) -> ::std::os::raw::c_int {
        (self.minisat_num_learnts.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_num_vars(&self, s: *mut minisat_solver) -> ::std::os::raw::c_int {
        (self.minisat_num_vars.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_num_freeVars(&self, s: *mut minisat_solver) -> ::std::os::raw::c_int {
        (self.minisat_num_freeVars.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_conflict_len(&self, s: *mut minisat_solver) -> ::std::os::raw::c_int {
        (self.minisat_conflict_len.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_conflict_nthLit(&self, s: *mut minisat_solver, i: ::std::os::raw::c_int) -> minisat_Lit {
        (self.minisat_conflict_nthLit.as_ref().expect("Expected function, got error."))(s, i)
    }
    pub unsafe fn minisat_set_conf_budget(&self, s: *mut minisat_solver, x: ::std::os::raw::c_int) {
        (self.minisat_set_conf_budget.as_ref().expect("Expected function, got error."))(s, x)
    }
    pub unsafe fn minisat_set_prop_budget(&self, s: *mut minisat_solver, x: ::std::os::raw::c_int) {
        (self.minisat_set_prop_budget.as_ref().expect("Expected function, got error."))(s, x)
    }
    pub unsafe fn minisat_no_budget(&self, s: *mut minisat_solver) {
        (self.minisat_no_budget.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_interrupt(&self, s: *mut minisat_solver) {
        (self.minisat_interrupt.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_clearInterrupt(&self, s: *mut minisat_solver) {
        (self.minisat_clearInterrupt.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_setFrozen(&self, s: *mut minisat_solver, v: minisat_Var, b: minisat_bool) {
        (self.minisat_setFrozen.as_ref().expect("Expected function, got error."))(s, v, b)
    }
    pub unsafe fn minisat_isEliminated(&self, s: *mut minisat_solver, v: minisat_Var) -> minisat_bool {
        (self.minisat_isEliminated.as_ref().expect("Expected function, got error."))(s, v)
    }
    pub unsafe fn minisat_eliminate(&self, s: *mut minisat_solver, turn_off_elim: minisat_bool) -> minisat_bool {
        (self.minisat_eliminate.as_ref().expect("Expected function, got error."))(s, turn_off_elim)
    }
    pub unsafe fn minisat_set_verbosity(&self, s: *mut minisat_solver, v: ::std::os::raw::c_int) {
        (self.minisat_set_verbosity.as_ref().expect("Expected function, got error."))(s, v)
    }
    pub unsafe fn minisat_num_conflicts(&self, s: *mut minisat_solver) -> ::std::os::raw::c_int {
        (self.minisat_num_conflicts.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_num_decisions(&self, s: *mut minisat_solver) -> ::std::os::raw::c_int {
        (self.minisat_num_decisions.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_num_restarts(&self, s: *mut minisat_solver) -> ::std::os::raw::c_int {
        (self.minisat_num_restarts.as_ref().expect("Expected function, got error."))(s)
    }
    pub unsafe fn minisat_num_propagations(&self, s: *mut minisat_solver) -> ::std::os::raw::c_int {
        (self.minisat_num_propagations.as_ref().expect("Expected function, got error."))(s)
    }
}

/* automatically generated by rust-bindgen 0.66.1 */

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CCaDiCaL {
    _unused: [u8; 0],
}
extern crate libloading;
pub struct ccadical {
    __library: ::libloading::Library,
    pub ccadical_signature: Result<unsafe extern "C" fn() -> *const ::std::os::raw::c_char, ::libloading::Error>,
    pub ccadical_init: Result<unsafe extern "C" fn() -> *mut CCaDiCaL, ::libloading::Error>,
    pub ccadical_release: Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL), ::libloading::Error>,
    pub ccadical_add: Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int), ::libloading::Error>,
    pub ccadical_assume: Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int), ::libloading::Error>,
    pub ccadical_solve: Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ccadical_val:
        Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ccadical_failed:
        Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ccadical_set_terminate: Result<
        unsafe extern "C" fn(
            arg1: *mut CCaDiCaL,
            state: *mut ::std::os::raw::c_void,
            terminate: ::std::option::Option<unsafe extern "C" fn(state: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int>,
        ),
        ::libloading::Error,
    >,
    pub ccadical_set_learn: Result<
        unsafe extern "C" fn(
            arg1: *mut CCaDiCaL,
            state: *mut ::std::os::raw::c_void,
            max_length: ::std::os::raw::c_int,
            learn: ::std::option::Option<unsafe extern "C" fn(state: *mut ::std::os::raw::c_void, clause: *mut ::std::os::raw::c_int)>,
        ),
        ::libloading::Error,
    >,
    pub ccadical_constrain: Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int), ::libloading::Error>,
    pub ccadical_constraint_failed: Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ccadical_set_option: Result<
        unsafe extern "C" fn(arg1: *mut CCaDiCaL, name: *const ::std::os::raw::c_char, val: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub ccadical_limit: Result<
        unsafe extern "C" fn(arg1: *mut CCaDiCaL, name: *const ::std::os::raw::c_char, limit: ::std::os::raw::c_int),
        ::libloading::Error,
    >,
    pub ccadical_get_option: Result<
        unsafe extern "C" fn(arg1: *mut CCaDiCaL, name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int,
        ::libloading::Error,
    >,
    pub ccadical_print_statistics: Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL), ::libloading::Error>,
    pub ccadical_active: Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL) -> i64, ::libloading::Error>,
    pub ccadical_irredundant: Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL) -> i64, ::libloading::Error>,
    pub ccadical_conflicts: Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL) -> i64, ::libloading::Error>,
    pub ccadical_decisions: Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL) -> i64, ::libloading::Error>,
    pub ccadical_restarts: Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL) -> i64, ::libloading::Error>,
    pub ccadical_propagations: Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL) -> i64, ::libloading::Error>,
    pub ccadical_fixed:
        Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ccadical_terminate: Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL), ::libloading::Error>,
    pub ccadical_freeze: Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int), ::libloading::Error>,
    pub ccadical_frozen:
        Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int, ::libloading::Error>,
    pub ccadical_melt: Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int), ::libloading::Error>,
    pub ccadical_simplify: Result<unsafe extern "C" fn(arg1: *mut CCaDiCaL) -> ::std::os::raw::c_int, ::libloading::Error>,
}
impl ccadical {
    pub unsafe fn new<P>(path: P) -> Result<Self, ::libloading::Error>
    where
        P: AsRef<::std::ffi::OsStr>,
    {
        let library = ::libloading::Library::new(path)?;
        Self::from_library(library)
    }
    pub unsafe fn from_library<L>(library: L) -> Result<Self, ::libloading::Error>
    where
        L: Into<::libloading::Library>,
    {
        let __library = library.into();
        let ccadical_signature = __library.get(b"ccadical_signature\0").map(|sym| *sym);
        let ccadical_init = __library.get(b"ccadical_init\0").map(|sym| *sym);
        let ccadical_release = __library.get(b"ccadical_release\0").map(|sym| *sym);
        let ccadical_add = __library.get(b"ccadical_add\0").map(|sym| *sym);
        let ccadical_assume = __library.get(b"ccadical_assume\0").map(|sym| *sym);
        let ccadical_solve = __library.get(b"ccadical_solve\0").map(|sym| *sym);
        let ccadical_val = __library.get(b"ccadical_val\0").map(|sym| *sym);
        let ccadical_failed = __library.get(b"ccadical_failed\0").map(|sym| *sym);
        let ccadical_set_terminate = __library.get(b"ccadical_set_terminate\0").map(|sym| *sym);
        let ccadical_set_learn = __library.get(b"ccadical_set_learn\0").map(|sym| *sym);
        let ccadical_constrain = __library.get(b"ccadical_constrain\0").map(|sym| *sym);
        let ccadical_constraint_failed = __library.get(b"ccadical_constraint_failed\0").map(|sym| *sym);
        let ccadical_set_option = __library.get(b"ccadical_set_option\0").map(|sym| *sym);
        let ccadical_limit = __library.get(b"ccadical_limit\0").map(|sym| *sym);
        let ccadical_get_option = __library.get(b"ccadical_get_option\0").map(|sym| *sym);
        let ccadical_print_statistics = __library.get(b"ccadical_print_statistics\0").map(|sym| *sym);
        let ccadical_active = __library.get(b"ccadical_active\0").map(|sym| *sym);
        let ccadical_irredundant = __library.get(b"ccadical_irredundant\0").map(|sym| *sym);
        let ccadical_conflicts = __library.get(b"ccadical_conflicts\0").map(|sym| *sym);
        let ccadical_decisions = __library.get(b"ccadical_decisions\0").map(|sym| *sym);
        let ccadical_restarts = __library.get(b"ccadical_restarts\0").map(|sym| *sym);
        let ccadical_propagations = __library.get(b"ccadical_propagations\0").map(|sym| *sym);
        let ccadical_fixed = __library.get(b"ccadical_fixed\0").map(|sym| *sym);
        let ccadical_terminate = __library.get(b"ccadical_terminate\0").map(|sym| *sym);
        let ccadical_freeze = __library.get(b"ccadical_freeze\0").map(|sym| *sym);
        let ccadical_frozen = __library.get(b"ccadical_frozen\0").map(|sym| *sym);
        let ccadical_melt = __library.get(b"ccadical_melt\0").map(|sym| *sym);
        let ccadical_simplify = __library.get(b"ccadical_simplify\0").map(|sym| *sym);
        Ok(ccadical {
            __library,
            ccadical_signature,
            ccadical_init,
            ccadical_release,
            ccadical_add,
            ccadical_assume,
            ccadical_solve,
            ccadical_val,
            ccadical_failed,
            ccadical_set_terminate,
            ccadical_set_learn,
            ccadical_constrain,
            ccadical_constraint_failed,
            ccadical_set_option,
            ccadical_limit,
            ccadical_get_option,
            ccadical_print_statistics,
            ccadical_active,
            ccadical_irredundant,
            ccadical_conflicts,
            ccadical_decisions,
            ccadical_restarts,
            ccadical_propagations,
            ccadical_fixed,
            ccadical_terminate,
            ccadical_freeze,
            ccadical_frozen,
            ccadical_melt,
            ccadical_simplify,
        })
    }
    pub unsafe fn ccadical_signature(&self) -> *const ::std::os::raw::c_char {
        (self.ccadical_signature.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn ccadical_init(&self) -> *mut CCaDiCaL {
        (self.ccadical_init.as_ref().expect("Expected function, got error."))()
    }
    pub unsafe fn ccadical_release(&self, arg1: *mut CCaDiCaL) {
        (self.ccadical_release.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ccadical_add(&self, arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int) {
        (self.ccadical_add.as_ref().expect("Expected function, got error."))(arg1, lit)
    }
    pub unsafe fn ccadical_assume(&self, arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int) {
        (self.ccadical_assume.as_ref().expect("Expected function, got error."))(arg1, lit)
    }
    pub unsafe fn ccadical_solve(&self, arg1: *mut CCaDiCaL) -> ::std::os::raw::c_int {
        (self.ccadical_solve.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ccadical_val(&self, arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.ccadical_val.as_ref().expect("Expected function, got error."))(arg1, lit)
    }
    pub unsafe fn ccadical_failed(&self, arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.ccadical_failed.as_ref().expect("Expected function, got error."))(arg1, lit)
    }
    pub unsafe fn ccadical_set_terminate(
        &self,
        arg1: *mut CCaDiCaL,
        state: *mut ::std::os::raw::c_void,
        terminate: ::std::option::Option<unsafe extern "C" fn(state: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int>,
    ) {
        (self.ccadical_set_terminate.as_ref().expect("Expected function, got error."))(arg1, state, terminate)
    }
    pub unsafe fn ccadical_set_learn(
        &self,
        arg1: *mut CCaDiCaL,
        state: *mut ::std::os::raw::c_void,
        max_length: ::std::os::raw::c_int,
        learn: ::std::option::Option<unsafe extern "C" fn(state: *mut ::std::os::raw::c_void, clause: *mut ::std::os::raw::c_int)>,
    ) {
        (self.ccadical_set_learn.as_ref().expect("Expected function, got error."))(arg1, state, max_length, learn)
    }
    pub unsafe fn ccadical_constrain(&self, arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int) {
        (self.ccadical_constrain.as_ref().expect("Expected function, got error."))(arg1, lit)
    }
    pub unsafe fn ccadical_constraint_failed(&self, arg1: *mut CCaDiCaL) -> ::std::os::raw::c_int {
        (self.ccadical_constraint_failed.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ccadical_set_option(&self, arg1: *mut CCaDiCaL, name: *const ::std::os::raw::c_char, val: ::std::os::raw::c_int) {
        (self.ccadical_set_option.as_ref().expect("Expected function, got error."))(arg1, name, val)
    }
    pub unsafe fn ccadical_limit(&self, arg1: *mut CCaDiCaL, name: *const ::std::os::raw::c_char, limit: ::std::os::raw::c_int) {
        (self.ccadical_limit.as_ref().expect("Expected function, got error."))(arg1, name, limit)
    }
    pub unsafe fn ccadical_get_option(&self, arg1: *mut CCaDiCaL, name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int {
        (self.ccadical_get_option.as_ref().expect("Expected function, got error."))(arg1, name)
    }
    pub unsafe fn ccadical_print_statistics(&self, arg1: *mut CCaDiCaL) {
        (self.ccadical_print_statistics.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ccadical_active(&self, arg1: *mut CCaDiCaL) -> i64 {
        (self.ccadical_active.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ccadical_irredundant(&self, arg1: *mut CCaDiCaL) -> i64 {
        (self.ccadical_irredundant.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ccadical_conflicts(&self, arg1: *mut CCaDiCaL) -> i64 {
        (self.ccadical_conflicts.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ccadical_decisions(&self, arg1: *mut CCaDiCaL) -> i64 {
        (self.ccadical_decisions.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ccadical_restarts(&self, arg1: *mut CCaDiCaL) -> i64 {
        (self.ccadical_restarts.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ccadical_propagations(&self, arg1: *mut CCaDiCaL) -> i64 {
        (self.ccadical_propagations.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ccadical_fixed(&self, arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.ccadical_fixed.as_ref().expect("Expected function, got error."))(arg1, lit)
    }
    pub unsafe fn ccadical_terminate(&self, arg1: *mut CCaDiCaL) {
        (self.ccadical_terminate.as_ref().expect("Expected function, got error."))(arg1)
    }
    pub unsafe fn ccadical_freeze(&self, arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int) {
        (self.ccadical_freeze.as_ref().expect("Expected function, got error."))(arg1, lit)
    }
    pub unsafe fn ccadical_frozen(&self, arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int) -> ::std::os::raw::c_int {
        (self.ccadical_frozen.as_ref().expect("Expected function, got error."))(arg1, lit)
    }
    pub unsafe fn ccadical_melt(&self, arg1: *mut CCaDiCaL, lit: ::std::os::raw::c_int) {
        (self.ccadical_melt.as_ref().expect("Expected function, got error."))(arg1, lit)
    }
    pub unsafe fn ccadical_simplify(&self, arg1: *mut CCaDiCaL) -> ::std::os::raw::c_int {
        (self.ccadical_simplify.as_ref().expect("Expected function, got error."))(arg1)
    }
}

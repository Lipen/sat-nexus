name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths-ignore:
      - 'README.adoc'
  pull_request:

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build and test on Linux
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Build all
        run: cargo build --workspace --verbose

      - name: Build and install MiniSat shared library (libminisat.so)
        working-directory: lib/minisat-sys/vendor/minisat
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release
          cmake --build build -- -j8
          sudo cmake --install build --strip --prefix /usr/local

      - name: Build and install MiniSat-C shared library (libminisat-c.so)
        working-directory: lib/minisat-sys/vendor/minisat-c-bindings
        run: |
          make config MINISAT_INCLUDE="-I/usr/local/include"
          make config MINISAT_LIB="-L/usr/local/lib -lminisat"
          make config prefix=/usr/local
          sudo make install

      - name: Build and install Cadical shared library (libcadical.so)
        working-directory: lib/cadical-sys/vendor/cadical
        run: |
          ./configure -fPIC
          make -j8 shared
          sudo install -m 644 build/libcadical.so -Dt /usr/local/lib

      - name: Run ldconfig and update LD_LIBRARY_PATH
        run: |
          sudo ldconfig -n /usr/local/lib
          ldconfig -p
          echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}/usr/local/lib" >> $GITHUB_ENV

      - name: Upload shared libraries
        uses: actions/upload-artifact@v3
        with:
          name: libs
          path: |
            /usr/local/lib/libminisat.so
            /usr/local/lib/libminisat-c.so
            /usr/local/lib/libcadical.so

      - name: Test all
        run: cargo test --workspace --verbose

  build-windows:
    name: Build and test on Windows
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable-gnu
          override: true

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-on-failure: true

      - name: Build all
        run: cargo build --workspace --verbose

      - name: Build MiniSat dynamic library
        working-directory: lib/minisat-sys/vendor/minisat
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release -G "MinGW Makefiles"
          cmake --build build
          cmake --install build --strip --prefix install
          # Result: install/bin/libminisat.dll

      - name: Build MiniSat-C dynamic library
        working-directory: lib/minisat-sys/vendor/minisat-c-bindings
        run: |
          make config MINISAT_INCLUDE="-I../zlib -I../minisat/install/include"
          make config MINISAT_LIB="-LC:/Strawberry/c/lib -L../minisat/install/lib -lminisat"
          make config prefix=install
          make install
          mv install/lib/libminisat-c.so install/lib/minisat-c.dll
          # Result: install/lib/minisat-c.dll

      - name: Build Cadical dynamic library
        working-directory: lib/cadical-sys/vendor/cadical
        run: |
          ./configure -fPIC
          make -j dll  2>&1
          # Result: build/cadical.dll

      - name: Copy DLLs to 'libs/'
        run: |
          mkdir -p libs
          cp lib/minisat-sys/vendor/minisat/install/bin/libminisat.dll libs/
          cp lib/minisat-sys/vendor/minisat-c-bindings/install/lib/minisat-c.dll libs/
          cp lib/cadical-sys/vendor/cadical/build/cadical.dll libs/
          ldd libs/*.dll
          ls -al libs/*.dll

      - name: Add 'libs/' to PATH
        shell: pwsh
        run: Add-Content $env:GITHUB_PATH "$((Get-Item libs).FullName)"

      - run: $env:PATH
        shell: pwsh

      - name: Upload DLLs
        uses: actions/upload-artifact@v3
        with:
          name: libs
          path: libs/

      - name: Test all
        run: cargo test --workspace --verbose

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up Rust stable
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: rustfmt

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Run rustfmt
        run: cargo fmt --all -- --check

  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Set up Rust nightly
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy

      - name: Set up Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Run clippy
        run: cargo clippy --workspace --tests

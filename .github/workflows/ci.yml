name: CI

on:
  workflow_dispatch:
  push:
    branches:
      - master
    paths-ignore:
      - 'README.adoc'
  pull_request:

env:
  CARGO_TERM_COLOR: always
  CARGO_INCREMENTAL: 0

jobs:
#  build-and-test:
#    name: Build and test on Linux
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#        with:
#          submodules: recursive
#
#      - name: Set up Rust
#        uses: actions-rs/toolchain@v1
#        with:
#          profile: minimal
#          toolchain: stable
#          override: true
#
#      - name: Set up cache
#        uses: Swatinem/rust-cache@v1
#
#      - name: Build
#        uses: actions-rs/cargo@v1
#        with:
#          command: build
#          args: --workspace
#
#      - name: Build and install MiniSat shared library (libminisat.so)
#        working-directory: lib/minisat-sys/vendor/minisat
#        run: |
#          cmake -B build -DCMAKE_BUILD_TYPE=Release
#          cmake --build build -- -j8
#          sudo cmake --install build --strip --prefix /usr/local
#
#      - name: Build and install MiniSat-C shared library (libminisat-c.so)
#        working-directory: lib/minisat-sys/vendor/minisat-c-bindings
#        run: |
#          make config MINISAT_INCLUDE="-I/usr/local/include"
#          make config MINISAT_LIB="-L/usr/local/lib -lminisat"
#          make config prefix=/usr/local
#          sudo make install
#
#      - name: Build and install Cadical shared library (libcadical.so)
#        working-directory: lib/cadical-sys/vendor/cadical
#        run: |
#          ./configure -fPIC
#          make -j8 shared
#          sudo install -m 644 build/libcadical.so -Dt /usr/local/lib
#
#      - name: Update ld cache and update LD_LIBRARY_PATH
#        run: |
#          sudo ldconfig -n /usr/local/lib
#          echo "LD_LIBRARY_PATH=${LD_LIBRARY_PATH:+${LD_LIBRARY_PATH}:}/usr/local/lib" >> $GITHUB_ENV
#
#      - name: Test
#        uses: actions-rs/cargo@v1
#        with:
#          command: test
#          args: --workspace

  build-windows:
    name: Build and test on Windows
    runs-on: windows-latest
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup upterm session
        uses: lhotari/action-upterm@v1
        with:
          ## limits ssh access and adds the ssh public key for the user which triggered the workflow
          limit-access-to-actor: true

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable-gnu
          override: true

      - name: Set up cache
        uses: Swatinem/rust-cache@v1
        with:
          cache-on-failure: true

      - name: Build MiniSat dynamic library
        working-directory: lib/minisat-sys/vendor/minisat
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=Release -G "MinGW Makefiles"
          cmake --build build
          cmake --install build --strip --prefix install
          # Result: install/bin/libminisat.dll

      - name: Build MiniSat-C dynamic library
        working-directory: lib/minisat-sys/vendor/minisat-c-bindings
        run: |
          make config MINISAT_INCLUDE="-I../minisat/install/include -I../zlib"
          make config MINISAT_LIB="-LC:/Strawberry/c/lib -L../minisat/install/lib -lminisat"
          make config prefix=install
          make install
          # Result: install/lib/libminisat-c.so (but this is actually a DLL!)

      - name: Build Cadical dynamic library
        working-directory: lib/cadical-sys/vendor/cadical
        run: |
          ./configure -fPIC
          make -j dll
          # Result: build/cadical.dll
          ldd build/cadical.dll

      - name: Copy dynamic libraries and update PATH
        run: |
          mkdir -p libs
          cp lib/minisat-sys/vendor/minisat/install/bin/libminisat.dll libs/
          cp lib/minisat-sys/vendor/minisat-c-bindings/install/lib/libminisat-c.so libs/minisat-c.dll
          cp lib/cadical-sys/vendor/cadical/build/cadical.dll libs/
          curl -OL https://github.com/Lipen/kotlin-satlib/releases/download/0.24.2/cadical.dll
          mv cadical.dll libs/cadical2.dll
          echo "$(realpath libs)" >> $GITHUB_PATH

#      - name: Build
#        uses: actions-rs/cargo@v1
#        with:
#          command: build
#          args: --workspace

#      - name: Test
#        uses: actions-rs/cargo@v1
#        with:
#          command: test
#          args: --workspace

      - run: echo $PATH

      - run: ldd libs/*.dll

      - name: Test 'cadical'
        continue-on-error: true
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p cadical

      - name: Test 'minisat' (dynamic)
        continue-on-error: true
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p minisat --features dynamic

      - name: Test 'minisat' (static)
        continue-on-error: true
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: -p minisat --features static

#  fmt:
#    name: Rustfmt
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#
#      - name: Set up Rust stable
#        uses: actions-rs/toolchain@v1
#        with:
#          profile: minimal
#          toolchain: stable
#          override: true
#          components: rustfmt
#
#      - name: Set up cache
#        uses: Swatinem/rust-cache@v1
#
#      - name: Run rustfmt
#        uses: actions-rs/cargo@v1
#        with:
#          command: fmt
#          args: --all -- --check
#
#  clippy:
#    name: Clippy
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v3
#        with:
#          submodules: recursive
#
#      - name: Set up Rust nightly
#        uses: actions-rs/toolchain@v1
#        with:
#          profile: minimal
#          toolchain: nightly
#          override: true
#          components: clippy
#
#      - name: Set up cache
#        uses: Swatinem/rust-cache@v1
#
#      - name: Run clippy
#        uses: actions-rs/cargo@v1
#        with:
#          command: clippy
#          args: --workspace --tests
